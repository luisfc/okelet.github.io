<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Mis notas</title><link href="https://okelet.github.io/" rel="alternate"></link><link href="https://okelet.github.io/feeds/category/virtualbox.atom.xml" rel="self"></link><id>https://okelet.github.io/</id><updated>2014-08-07T13:49:59+02:00</updated><entry><title>Red NAT privada con salida al exterior en VirtualBox</title><link href="https://okelet.github.io/posts/2014/08/red-nat-privada-con-salida-al-exterior-en-virtualbox/" rel="alternate"></link><updated>2014-08-07T13:49:59+02:00</updated><author><name>Juan Asensio Sánchez</name></author><id>tag:okelet.github.io,2014-08-07:posts/2014/08/red-nat-privada-con-salida-al-exterior-en-virtualbox/</id><summary type="html">&lt;p&gt;Una de las cosas que más echo en falta en &lt;a href="https://www.virtualbox.org"&gt;VirtualBox&lt;/a&gt; con respecto a cuando trabajaba con &lt;a href="http://www.vmware.com/es/products/workstation"&gt;VMware Workstation&lt;/a&gt; o &lt;a href="http://www.vmware.com/es/products/player"&gt;Player&lt;/a&gt;, al trabajar una máquina local para hacer pruebas, es que estas últimas te creaban varios tipos de redes por defecto que VirtualBox no hace. La más útil para mi, sobre todo cuando estás en un cliente en el que es difícil solicitar IPs o cuando quieres crear una red interna de pruebas, es crear una &lt;a href="https://www.vmware.com/support/ws3/doc/ws32_network21.html"&gt;red privada de la que formen parte tanto las máquinas virtuales como la propia máquina anfitriona, y que tenga salida al exterior mediante NAT&lt;/a&gt;. &lt;/p&gt;


&lt;p&gt;En las últimas versiones de VirtualBox (a partir de la 4.3, en modo experimental) existe el llamado &lt;a href="https://www.virtualbox.org/manual/ch06.html#network_nat_service"&gt;NAT Service&lt;/a&gt;, que simula el comportamiento anterior de VMware, pero que no permite la conexión desde la máquina anfitriona (ya que, al contrario que VMware, VirtualBox no crea una interfaz virtual para esta red) hacia las máquinas virtuales o a la inversa. Esto es muy cómodo cuando quieres hacer SSH hacia las máquinas virtuales, ya que no tienes que estar redirigiendo puertos, que es la única forma de hacerlo con VirtualBox en el modo NAT Service (y no digamos si tienes varias máquinas virtuales, el lío de redirección de puertos y parámetros al SSH para conectar a las diferentes máquinas virtuales).&lt;/p&gt;
&lt;p&gt;Buscando una solución alternativa y lo más transparente y sencilla de gestionar, hace tiempo descubrí &lt;a href="http://www.tolaris.com/2012/05/16/using-host-networking-and-nat-with-virtualbox-v2-0"&gt;esta página&lt;/a&gt; que lo que hace es crear una interfaz virtual en la máquina anfitrión, configurando el reenvío TCP y un servidor &lt;a href="http://www.thekelleys.org.uk/dnsmasq/doc.html"&gt;Dnsmasq&lt;/a&gt; para servir direcciones por DHCP y la resolución DNS de esa red. De esta forma, si la red de las máquinas virtuales se configura en modo bridge, usando la interfaz creada, todas podrán comunicarse entre sí y con la máquina anfitrión, aparte de tener un servidor DHCP y DNS (por lo que podremos crear asignaciones de direcciones estáticas, entradas DNS para un dominio ficticio interno, etc.). Además, las máquinas virtuales tendrán salida al exterior, ya que la máquina anfitrión realizará NAT del tráfico saliente que se reciba desde esta red. Incluso podemos montar un servidor PXE para arrancar sistemas en red o la instalación automática mediante &lt;a href="http://fedoraproject.org/wiki/Anaconda/Kickstart"&gt;Kickstart&lt;/a&gt;, &lt;a href="http://www.cobblerd.org"&gt;Clobber&lt;/a&gt; o &lt;a href="https://wiki.debian.org/DebianInstaller/Preseed"&gt;Preseed&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para rizar aún más el rizo, decidí simplificar la configuración. La anterior está bien, pero es necesario tener bastantes cosas en cuenta (la interfaz, el paquete bridge-utils, el reenvío TCP, la configuración de Dnsmasq, etc.), y se complica a mayores cuando quieres tener varias redes virtuales separadas y que se comuniquen entre sí. Buscando un poco más, descubrí &lt;a href="http://ballardini.com.ar/blog/red-portatil-v-interfaz-tap-en-anfitrion-y-en-huesped-kvm"&gt;esta página&lt;/a&gt; en la que se combinan todos los pasos anteriores en un único punto. En resumen, lo que se hace es crear una interfaz virtual, y en los precomandos y postcomandos al levantar y apagar la interfaz, se ejecutan todos los pasos necesarios. Para poner en marcha esto, lo primero será instalar Dnsmasq y los paquetes necesarios para crear la interfaz virtual:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install dnsmasq vde2 bridge-utils
update-rc.d dnsmasq disable
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;[su_box title="Nota"]
Es necesario deshabilitar &lt;code&gt;dnsmasq&lt;/code&gt; del arranque ya que la configuración por defecto escucha por todas las interfaces, y al levantar &lt;code&gt;dnsmasq&lt;/code&gt; por cada interfaz virtual, da un error diciendo que la dirección ya está en uso.
[/su_box]&lt;/p&gt;
&lt;p&gt;Para no tener que tocar mucho el archivo /etc/network/interfaces, y poder gestionar más fácilmente las interfaces virtuales que creemos, configuraremos el sistema para que &lt;a href="http://askubuntu.com/questions/323566/separate-etc-network-interfaces-file"&gt;cargue dinámicamente todos los archivos de configuración desde el directorio /etc/network/interfaces.d&lt;/a&gt;; para ello, tendremos que añadir, si no existe ya, esta línea:&lt;/p&gt;
&lt;p&gt;{% codeblock /etc/network/interfaces lang:text %}
auto lo
iface lo inet loopback&lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;source /etc/network/interfaces.d/*.cfg&lt;/p&gt;
&lt;p&gt;Y por supuesto, crear dicho directorio:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p /etc/network/interfaces.d
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A continuación, ya podemos definir la interfaz:&lt;/p&gt;
&lt;p&gt;{% codeblock /etc/network/interfaces.d/vnet0.cfg lang:text %}
auto vnet0
iface vnet0 inet static&lt;/p&gt;
&lt;p&gt;address 192.168.77.253
  netmask 255.255.255.0&lt;/p&gt;
&lt;p&gt;############################################################################################################
  # Arranque de la interfaz
  ############################################################################################################&lt;/p&gt;
&lt;p&gt;# Crear la interfaz virtual
  pre-up /usr/bin/vde_switch --tap ${IFACE} --daemon --group vde2-net --sock /var/run/${IFACE}.ctl \
   --mod 775 --mgmtmode 770 --mgmt /var/run/${IFACE}-manage --pidfile /var/run/${IFACE}_vde.pid&lt;/p&gt;
&lt;p&gt;# Comprobamos si existe un archivo de configuración de Dnsmasq, y si no existe, creamos uno vacío
  # para que no se queje el proceso de Dnsmasq al levantarlo
  up test -e /etc/dnsmasq_${IFACE}.conf || touch /etc/dnsmasq_${IFACE}.conf&lt;/p&gt;
&lt;p&gt;# Levantar el proceso de Dnsmasq, pasando como interfaz a la que asociarse la propia interfaz y el
  # rango DHCP para asignar direcciones (la dirección de la interfaz definida arriba debe estar en este
  # rango); se pueden especificar más parámetros añadiéndolos aquí o creando/modificando un archivo
  # de configuración según la instrucción anterior.
  up /usr/sbin/dnsmasq --interface=${IFACE} --except-interface=lo --bind-interfaces --user=nobody \
     --dhcp-range=${IFACE},192.168.77.101,192.168.77.199,8h \
     --local=/pruebas.intra/ --domain=pruebas.intra \
     --pid-file=/var/run/${IFACE}&lt;em&gt;dnsmasq.pid --conf-file=/etc/dnsmasq&lt;/em&gt;${IFACE}.conf&lt;/p&gt;
&lt;p&gt;# Añadir una regla a iptables para natear el tráfico saliente de esta red
  post-up iptables -t nat -I POSTROUTING -s 192.168.77.0/24 -j MASQUERADE&lt;/p&gt;
&lt;p&gt;############################################################################################################
  # Parada de la interfaz
  ############################################################################################################&lt;/p&gt;
&lt;p&gt;# Eliminar el nateo del tráfico saliente asociada a la red
  pre-down iptables -t nat -D POSTROUTING -s 192.168.77.0/24 -j MASQUERADE&lt;/p&gt;
&lt;p&gt;# Parar el proceso de Dnsmasq
  down kill $(cat /var/run/${IFACE}_dnsmasq.pid) &amp;amp;&amp;amp; rm -f /var/run/${IFACE}_dnsmasq.pid&lt;/p&gt;
&lt;p&gt;# Borrar el archivo de configuración de Dnsmasq si está vacío (para mantener limpio el sistema)
  down test -s /etc/dnsmasq_${IFACE}.conf || rm -f /etc/dnsmasq_${IFACE}.conf&lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;# Eliminar la interfaz virtual
  post-down kill $(cat /var/run/${IFACE}_vde.pid) || kill -9 $(cat /var/run/${IFACE}_vde.pid)&lt;/p&gt;
&lt;p&gt;[su_box title="Nota"]
En el post original de donde saqué esta configuración (el segundo referenciado), la regla de &lt;span class="lang:default highlight:0 decode:true crayon-inline "&gt;iptables&lt;/span&gt; hacía referencia a la interfaz de salida, y no a la red de origen como he puesto yo. Esto lo he tenido que hacer ya que Ubuntu usa NetworkManager, y parece que levanta esta interfaz antes que las demás (por ejemplo, con la que tengamos configurada como principal como &lt;span class="lang:default highlight:0 decode:true crayon-inline "&gt;eth0&lt;/span&gt; o &lt;span class="lang:default highlight:0 decode:true crayon-inline "&gt;wlan0&lt;/span&gt;), por lo que no es posible la interfaz de salida de la ruta por defecto (y que además esta interfaz puede cambiarse desde el escritorio). Por tanto, lo que he hecho, es que en la regla de &lt;span class="lang:default highlight:0 decode:true crayon-inline "&gt;iptables&lt;/span&gt;, en lugar de hacer NAT a todo lo que salga por la interfaz por defecto tras el enrutado, es hacer NAT a todo lo que venga de la red de la interfaz virtual tras el enrutado.&lt;/p&gt;
&lt;p&gt;Esto tiene un problema, que no creo que sea difícil de solucionar, pero que no lo he hecho, y es que si hay varias interfaces virtuales y queremos comunicar máquinas de distintas redes, siempre se hará NAT, aunque no salgan del propio host anfitrión.
[/su_box]&lt;/p&gt;
&lt;p&gt;El único paso que he dejado fuera es la configuración del reenvío TCP, ya que no está ligado a una interfaz en concreto, sino que va a nivel de sistema.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;net.ipv4.ip_forward=1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Recargamos la configuración para que se aplique el cambio anterior:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sysctl -p
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Las ventajas de esta configuración sobre la primera es que:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Se levanta un proceso Dnsmasq distinto para cada interfaz, con un archivo de configuración específico, por lo que se pueden agregar en el fichero datos que no se pasan directamente al programa por parámetros, como asignaciones de IPs estáticas, registros DNS, etc.&lt;/li&gt;
&lt;li&gt;Se pueden tener varias interfaces virtuales, cada una con su propia configuración DNS, simplemente creando una nueva interfaz copiando y pegando tantas veces el bloque anterior y modificando los datos mínimos (sobre todo la dirección IP, el rango DHCP y las reglas de iptables), o creando un archivo distinto por cada interfaz en el directorio &lt;code&gt;/etc/network/interfaces.d&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para finalizar, se puede modificar la configuración de Dnsmasq para personalizar las asignaciones DHCP, la resolución DNS, así como hacer que los sistemas arranquen desde la red con PXE; hay configuraciones de ejemplo en esta página.&lt;/p&gt;</summary></entry></feed>